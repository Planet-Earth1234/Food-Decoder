import torch
from torch import nn 
from modell import CustomEfficientNet, li
from flask import Flask, request, jsonify
from flask_cors import CORS 
from PIL import Image
import io
from torchvision import transforms

app = Flask(__name__)
cors = CORS(app, origins="*")
model = CustomEfficientNet()
model_weights_path = r"C:\Users\Yash\Downloads\model_weights.pth"

model.load_state_dict(torch.load(model_weights_path, map_location=torch.device('cpu')))

model.eval() 

# Define the preprocessing transform
transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# API endpoint for image classification
@app.route('/predict', methods=['POST'])
def predict():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'})

    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'})

    try:
        # Load the image
        image = Image.open(io.BytesIO(file.read()))
        image_tensor = transform(image).unsqueeze(0)  # Add batch dimension

        # Make prediction
        with torch.no_grad():
            output = model(image_tensor)
        _, predicted_class = torch.max(output, 1)

        # Return the predicted class (for simplicity)
        nums  = predicted_class.item()
        return jsonify({'predicted_class': li[nums]})

    except Exception as e:
        return jsonify({'error': str(e)})

if __name__ == '__main__':
    app.run(debug=True, port = 5173)        
